package entity

import "context"

type fooStruct struct {
	string string
	int    int
}

type foosStruct []fooInterface

type fooInterface interface {
	String() string
	Int() int
	SetString(string string)
	SetInt(int int)
	BeforeAdd(ctx context.Context) error
	SetAll(req fooInterface)
	ToPrimary(ctx context.Context, req interface{}) (string, error)
}
type foosInterface interface {
	Len() int
	Append(req fooInterface)
	Elements() []fooInterface
}

func (m *foosStruct) Len() int {
	if m != nil {
		return len(*m)
	}
	return 0
}
func (m *foosStruct) Append(req fooInterface) {
	if m != nil {
		*m = append(*m, req)
	}
}
func (m *foosStruct) Elements() []fooInterface {
	return *m
}
func (m *fooStruct) String() string {
	return m.string
}

func (m *fooStruct) Int() int {
	return m.int
}

func (m *fooStruct) SetString(string string) {
	m.string = string
}

func (m *fooStruct) SetInt(int int) {
	m.int = int
}

func (m *fooStruct) BeforeAdd(ctx context.Context) error {
	return nil
}

func (m *fooStruct) SetAll(req fooInterface) {
	m.SetString(req.String())
	m.SetInt(req.Int())
}

func (m *fooStruct) ToPrimary(ctx context.Context, req interface{}) (string, error) {
	var resp string
	return resp, nil
}

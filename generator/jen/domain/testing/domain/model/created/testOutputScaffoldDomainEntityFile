package entity

import "context"

type fooStruct struct {
	id    *int64
	title *string
}

func newFoo() *foo {
	return &foo{fooStruct: newFooStruct()}
}

func newFooStruct() *fooStruct {
	return &fooStruct{}
}

type foosStruct []fooInterface

type fooInterface interface {
	Id() *int64
	Title() *string
	SetId(id *int64)
	SetTitle(title *string)
	BeforeAdd(ctx context.Context) error
	SetAll(req fooInterface)
	ToPrimary(ctx context.Context, req interface{}) (int64, error)
}
type foosInterface interface {
	Len() int
	Append(req fooInterface)
	Elements() []fooInterface
}

func (m *foosStruct) Len() int {
	if m != nil {
		return len(*m)
	}
	return 0
}
func (m *foosStruct) Append(req fooInterface) {
	if m != nil {
		*m = append(*m, req)
	}
}
func (m *foosStruct) Elements() []fooInterface {
	return *m
}
func (m *fooStruct) Id() *int64 {
	return m.id
}

func (m *fooStruct) Title() *string {
	return m.title
}

func (m *fooStruct) SetId(id *int64) {
	m.id = id
}

func (m *fooStruct) SetTitle(title *string) {
	m.title = title
}

func (m *fooStruct) SetAll(req fooInterface) {
	m.SetId(req.Id())
	m.SetTitle(req.Title())
}

func (m *fooStruct) BeforeAdd(ctx context.Context) error {
	return nil
}

func (m *fooStruct) ToPrimary(ctx context.Context, req interface{}) (int64, error) {
	var resp int64
	return resp, nil
}

package repository

import (
	"context"
	entity "github.com/brianshepanek/turnbull/_testing/output/domain/entity"
	bson "go.mongodb.org/mongo-driver/bson"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

type mongoFooRepositoryStruct struct {
	client     *mongo.Client
	db         string
	collection string
}
type fooLocal struct {
	*entity.Foo
}

func (m *fooLocal) MarshalBSON() ([]byte, error) {
	type bsonStructPrivate struct {
		Identifier *int64  `bson:"identifier"`
		String     *string `bson:"string"`
		Int        *int    `bson:"int"`
	}
	bsonStruct := bsonStructPrivate{
		Identifier: m.Identifier,
		Int:        m.Int,
		String:     m.String,
	}
	return bson.Marshal(&bsonStruct)
}

func (m *fooLocal) UnmarshalBSON(data []byte) error {
	type bsonStructPrivate struct {
		Identifier *int64  `bson:"identifier"`
		String     *string `bson:"string"`
		Int        *int    `bson:"int"`
	}
	bsonStruct := bsonStructPrivate{}
	err := bson.Unmarshal(data, &bsonStruct)
	if err != nil {
		return err
	}
	m.Identifier = bsonStruct.Identifier
	m.String = bsonStruct.String
	m.Int = bsonStruct.Int
	return nil
}

func (r *mongoFooRepositoryStruct) Count(ctx context.Context, req int) error {
	return nil
}

func (r *mongoFooRepositoryStruct) Browse(ctx context.Context, req *[]entity.Foo) error {

	collection := r.client.Database(r.db).Collection(r.collection)

	cursor, err := collection.Find(ctx, bson.D{})
	if err != nil {
		return err
	}

	for cursor.Next(ctx) {
		elem := &fooLocal{entity.NewFoo()}
		err := cursor.Decode(&elem)
		if err != nil {
			return err
		}
		*req = append(*req, *elem.Foo)
	}

	return nil

}

func (r *mongoFooRepositoryStruct) Read(ctx context.Context, id int64, req *entity.Foo) error {

	fooLocal := &fooLocal{req}

	collection := r.client.Database(r.db).Collection(r.collection)

	filter := bson.M{"identifier": id}

	err := collection.FindOne(ctx, filter).Decode(fooLocal)
	if err != nil {
		return err
	}

	return nil

}

func (r *mongoFooRepositoryStruct) Edit(ctx context.Context, id int64, req *entity.Foo) error {

	current := &fooLocal{entity.NewFoo()}
	fooLocal := &fooLocal{req}

	collection := r.client.Database(r.db).Collection(r.collection)

	filter := bson.M{"identifier": id}

	err := collection.FindOne(ctx, filter).Decode(&current)
	if err != nil {
		return err
	}

	if fooLocal.Identifier != nil {
		current.Identifier = fooLocal.Identifier
	}

	if fooLocal.String != nil {
		current.String = fooLocal.String
	}

	if fooLocal.Int != nil {
		current.Int = fooLocal.Int
	}

	err = collection.FindOneAndReplace(ctx, filter, current).Decode(&current)
	if err != nil {
		return err
	}

	return nil

}

func (r *mongoFooRepositoryStruct) Add(ctx context.Context, req *entity.Foo) error {

	fooLocal := &fooLocal{req}

	collection := r.client.Database(r.db).Collection(r.collection)

	_, err := collection.InsertOne(ctx, fooLocal)
	if err != nil {
		return err
	}

	return nil

}

func (r *mongoFooRepositoryStruct) Delete(ctx context.Context, id int64, req *entity.Foo) error {

	collection := r.client.Database(r.db).Collection(r.collection)

	filter := bson.M{"identifier": id}

	_, err := collection.DeleteOne(ctx, filter)
	if err != nil {
		return err
	}

	return nil

}
